import tensorflow as tf
import tensorflow.keras.datasets.fashion_mnist as fmnist
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from tqdm import tqdm
from tensorflow.keras import layers
from tensorflow.keras.models import Model
import warnings
warnings.filterwarnings('ignore')
tf.test.is_gpu_available()

(train_image, train_label_or), (test_image, test_label_or) = fmnist.load_data() 
label_names = ["T恤","牛仔裤","套衫","裙子","外套","凉鞋","衬衫","运动鞋","包","短靴"]

#对手写数字的标签进行one_hat编码
train_label = np.eye(10)[train_label_or].astype(np.float32)
test_label = np.eye(10)[test_label_or].astype(np.float32)

train_image = tf.cast(train_image,tf.float32)
test_image = tf.cast(test_image,tf.float32)

#将数据进行归一化操作
train_image = train_image/255.0
test_image = test_image/255.0

images_count = train_image.shape[0]

#(60000, 28, 28) ----> (60000, 28, 28, 1)
train_image = np.expand_dims(train_image, -1)
test_image = np.expand_dims(test_image, -1)

BATCH_SIZE = 256

ts_train_images = tf.data.Dataset.from_tensor_slices(train_image)
ts_train_labels = tf.data.Dataset.from_tensor_slices(train_label)
ts_train_set = tf.data.Dataset.zip((ts_train_images,ts_train_labels))
train_dataset = ts_train_set.shuffle(images_count).batch(BATCH_SIZE)
def encoder():
    img_input = layers.Input(shape = (28,28,1))
    noise_input = layers.Input(shape = (28,28,1))
    
    encoder_input = layers.Concatenate()([img_input,noise_input])
    y = layers.Conv2D(32,[2,2],strides = 2,padding = "valid",use_bias = False)(encoder_input)
    y = layers.BatchNormalization()(y)
    y = layers.Activation("tanh")(y)
    
    y = layers.Conv2D(64,[2,2],strides = 2,padding = "valid",use_bias = False)(y)
    y = layers.BatchNormalization()(y)
    y = layers.Activation("tanh")(y)
    
    y = layers.Conv2D(32,[2,2],strides = 2,padding = "same",use_bias = False)(y)
    y = layers.BatchNormalization()(y)
    fea_out = layers.Activation("tanh")(y)
    
    encoder_model = Model(inputs = [img_input,noise_input],outputs = fea_out)
    encoder_model.summary()
    return encoder_model
Encoder = encoder()

def decoder():  
    decoder_input = layers.Input(shape = (4,4,32))
    #8*8*32
    y = layers.Conv2DTranspose(32,[3,3],strides = 2,padding = "same",use_bias = False)(decoder_input)
    y = layers.Dropout(rate = 0.3)(y)
    y = layers.BatchNormalization()(y)
    y = layers.Activation("tanh")(y)
    
    #7*7*64
    y = layers.Conv2D(64,[2,2],strides = 1,padding = "valid",use_bias = False)(y)
    y = layers.Dropout(rate = 0.3)(y)
    y = layers.BatchNormalization()(y)
    y = layers.Activation("tanh")(y)
    
    #14*14*128
    y = layers.Conv2DTranspose(128,[3,3],strides = 2,padding = "same",use_bias = False)(y)
    y = layers.Dropout(rate = 0.3)(y)
    y = layers.BatchNormalization()(y)
    y = layers.Activation("tanh")(y)
    
    #28*28*1
    adv_img = layers.Conv2DTranspose(1,[5,5],strides = 2,padding = "same",use_bias = False,kernel_initializer='random_normal')(y)
    adv_img = layers.BatchNormalization()(adv_img)
    
    #28*28*1
    adv_per = layers.Conv2DTranspose(1,[5,5],strides = 2,padding = "same",use_bias = False,kernel_initializer='random_normal')(y)
    adv_per = layers.BatchNormalization()(adv_per)
    #[-1,1]
    adv_per = layers.Activation("tanh")(adv_per)
    
    decoder_model = Model(inputs = decoder_input,outputs = [adv_img,adv_per])
    decoder_model.summary()
    return decoder_model
Decoder = decoder()

"""
搭建判别器网络
"""
def discriminator():
    dis_input = layers.Input(shape = (28,28,1))
    
    x = layers.Conv2D(filters=32, kernel_size=3, strides=(2, 2))(dis_input)
    x = layers.Activation("relu")(x)
    
    x = layers.Conv2D(filters=64, kernel_size=3, strides=(2, 2))(x)
    x = layers.Activation("relu")(x)
    
    x = tf.keras.layers.Flatten()(x)    
    
    #判断真实样本，还是假样本
    x = layers.Dense(1)(x)
    
    dis_model = Model(inputs = dis_input,outputs = x)
    dis_model.summary()
    return dis_model
Discriminator = discriminator()

target_net_lenet = tf.keras.models.load_model("D:/model_save/LeNet-f.h5")
target_net_alex = tf.keras.models.load_model("D:/model_save/AlexNet-FashionMNIST.h5")
target_net_vgg = tf.keras.models.load_model("D:/model_save/VGGNet-FashionMNIST.h5")

"""
待攻击的目标网络
"""
target_net = target_net_lenet

fool_loss_fun = tf.losses.CategoricalCrossentropy(from_logits=False)
dis_loss_fun = tf.losses.BinaryCrossentropy(from_logits=False)
optimizer1 = tf.keras.optimizers.Adam(1e-2)
optimizer2 = tf.keras.optimizers.Adam(1e-2)
optimizer3 = tf.keras.optimizers.Adam(1e-2)

"""
定义记录损失的变化
"""
res_trains_loss = tf.keras.metrics.Mean("res_trains_loss")
fool_trains_loss = tf.keras.metrics.Mean("fool_trains_loss")

ae_trains_loss = tf.keras.metrics.Mean("ae_trains_loss")
dis_trains_loss = tf.keras.metrics.Mean("dis_trains_loss")

def train_epoch(image_batch,label_batch):
    with tf.GradientTape() as encoder_tap,tf.GradientTape() as decoder_tap,tf.GradientTape() as dis_tap:
        """
        噪音特征图像素值符合正态分布
        """
        noise_batch = tf.random.normal(shape = image_batch.shape)
        encoder_out = Encoder([image_batch,noise_batch])
        imgs_fake,imgs_per = Decoder(encoder_out)
        imgs_fake2 = tf.sigmoid(imgs_fake)
        perturbation = tf.clip_by_value(imgs_per,-0.1,0.1)
        last_img = tf.add(perturbation,imgs_fake2)

        """
        重构损失
        """
        restructure_loss = tf.nn.sigmoid_cross_entropy_with_logits(labels = image_batch,logits = imgs_fake)
        restructure_loss = tf.reduce_sum(restructure_loss)/image_batch.shape[0]


        predict_one = target_net(tf.sigmoid(imgs_fake),training=False)
        fool_loss_one = fool_loss_fun(predict_one,label_batch)
        
        predict_two = target_net(tf.sigmoid(last_img),training=False)
        fool_loss_two = fool_loss_fun(predict_two,label_batch)
        
        fool_loss = fool_loss_one + fool_loss_two*0.7
        
        
        """
        判别损失
        """
        real_out = Discriminator(image_batch,training=True)
        fake_out = Discriminator(tf.nn.sigmoid(last_img),training=True)
        ae_dis_loss = tf.keras.losses.BinaryCrossentropy(from_logits= True)(tf.ones_like(fake_out),fake_out)
        
        gan_dis_real_loss = tf.keras.losses.BinaryCrossentropy(from_logits= True)(tf.ones_like(real_out),real_out)
        gan_dis_fake_loss = tf.keras.losses.BinaryCrossentropy(from_logits= True)(tf.zeros_like(fake_out),fake_out)
        
        all_ae_loss = restructure_loss-fool_loss*10+ae_dis_loss*0.5
        all_dis_loss = gan_dis_real_loss+gan_dis_fake_loss*0.5
        
        """
        记录损失值
        """
        res_trains_loss(restructure_loss)
        fool_trains_loss(fool_loss)
        ae_trains_loss(all_ae_loss)
        dis_trains_loss(all_dis_loss)
        
    """
    更新模型参数
    """
    encoder_gard = encoder_tap.gradient(all_ae_loss,Encoder.trainable_variables)
    decoder_grad = decoder_tap.gradient(all_ae_loss,Decoder.trainable_variables)
    dis_grad = dis_tap.gradient(all_dis_loss,Discriminator.trainable_variables)

    optimizer1.apply_gradients(zip(encoder_gard,Encoder.trainable_variables))    
    optimizer2.apply_gradients(zip(decoder_grad,Decoder.trainable_variables))
    optimizer3.apply_gradients(zip(dis_grad,Discriminator.trainable_variables))

def generator():
    input_img = train_image[np.random.randint(train_image.shape[0])]
    input_img = np.expand_dims(input_img,0)
    input_noise = np.random.normal(size = input_img.shape)
    en_output = Encoder.predict([input_img,input_noise])
    imgs_fake,imgs_per = Decoder.predict(en_output)
    perturbation = tf.clip_by_value(imgs_per,-0.1,0.1)
    imgs_fake2 = tf.sigmoid(imgs_fake)
    last_img = tf.add(perturbation,imgs_fake2)
    last_img = tf.sigmoid(last_img)
    p_label0 = np.argmax(target_net.predict(input_img))
    p_label = np.argmax(target_net.predict(last_img))
    plt.figure(figsize = (2,3))
    ax1 = plt.subplot(1,2,1)
    ax1.axis("off")
    ax1.imshow(input_img[0],cmap = "gray")
    ax2 = plt.subplot(1,2,2)
    ax2.axis("off")
    ax2.imshow(last_img[0],cmap = "gray")
    print("\n原始样本lable:{}-----对抗样本lable:{}".format(p_label0,p_label))
    plt.show()

"""
迭代的次数
"""
EPOCHS = 300

"""
统计攻击成功率及其迁移率
"""
def attack_succs():
    input_img = test_image[:123]
    input_noise = np.random.normal(size = input_img.shape)
    en_output = Encoder.predict([input_img,input_noise])
    imgs_fake,imgs_per = Decoder.predict(en_output)
    perturbation = tf.clip_by_value(imgs_per,-0.1,0.1)
    imgs_fake2 = tf.sigmoid(imgs_fake)
    last_img = tf.add(perturbation,imgs_fake2)
    adv_imgs = tf.sigmoid(last_img)
    #原始攻击
    att_accs1 = 1 - target_net_lenet.evaluate(x = adv_imgs,y = test_label[:10000],verbose = 0)[1]
    #迁移攻击acc
    att_accs2 = 1 - target_net_alex.evaluate(x = adv_imgs,y = test_label[:10000],verbose = 0)[1]
    #迁移攻击acc
    att_accs3 = 1 - target_net_vgg.evaluate(x = adv_imgs,y = test_label[:10000],verbose = 0)[1]
    print("原始攻击acc：{}------迁移攻击acc: {}-----迁移攻击acc: {}".format(att_accs1,att_accs2,att_accs3))

def train():
    for epoch in tqdm(range(EPOCHS)):
        for image_batch,label_batch in train_dataset:
            print('*',end = "")
            train_epoch(image_batch,label_batch)
        generator()
        print()
        print("restructure_loss",res_trains_loss.result().numpy())
        print("fool_loss",fool_trains_loss.result().numpy())
        print("ae_gen_loss",ae_trains_loss.result().numpy())
        print("ad_dis_loss",dis_trains_loss.result().numpy())
        res_trains_loss.reset_states()
        fool_trains_loss.reset_states()
        ae_trains_loss.reset_states()
        dis_trains_loss.reset_states()
        if epoch % 2 == 0:
            attack_succs()

if __name__ == '__main__':
	train()



